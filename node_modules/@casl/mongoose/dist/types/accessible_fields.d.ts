import { Normalize, AnyMongoAbility, Generics } from '@casl/ability';
import { Schema, Model, Document } from 'mongoose';
export declare type AccessibleFieldsOptions = {
    getFields(schema: Schema<Document>): string[];
} & ({
    only: string | string[];
} | {
    except: string | string[];
});
export declare const getSchemaPaths: AccessibleFieldsOptions['getFields'];
declare type GetAccessibleFields<T extends AccessibleFieldsDocument> = <U extends AnyMongoAbility>(this: Model<T> | T, ability: U, action?: Normalize<Generics<U>['abilities']>[0]) => string[];
export interface AccessibleFieldsModel<T extends AccessibleFieldsDocument> extends Model<T> {
    accessibleFieldsBy: GetAccessibleFields<T>;
}
export interface AccessibleFieldsDocument extends Document {
    accessibleFieldsBy: GetAccessibleFields<AccessibleFieldsDocument>;
}
export declare function accessibleFieldsPlugin(schema: Schema<AccessibleFieldsDocument>, rawOptions?: Partial<AccessibleFieldsOptions>): void;
export {};
